#!/usr/bin/env bash

[ ${DOCKER_DEBUG} ] && set -x

die () {
  echo "ERROR: ${1}"
  exit 1
}

# PID, trap, wait; all belongs to 'docker stop' signal handeling.
# This is the same logic as the parent docker container, but rather this,
# than creating a one-time process in supervisord to handle this logic.
PID=; trap '[[ ${PID} ]] && kill ${PID}; exit 0' SIGTERM

supervisord_pre=$(ls /hooks/supervisord-pre.d/* 2>/dev/null | sort -n )
if [ "$supervisord_pre" != "" ]; then
  for hook in $supervisord_pre; do
    echo "Executing hook ${hook}"
    /bin/bash -c "${hook}"
    if [ "$?" != "0" ]; then
      die "hook ${hook}} returned a non-zero exit status '$?'"
    fi
  done
fi

[[ -f "/hooks/supervisord-pre" ]] && echo "The /hooks/supervisord-pre hook has been replaced with /hooks/supervisord-pre.d/*" && exit 1
#[ -f "/hooks/supervisord-pre" ] && /hooks/supervisord-pre

exec /usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf -e ${SUPERVISORD_LOGLEVEL:-error}

